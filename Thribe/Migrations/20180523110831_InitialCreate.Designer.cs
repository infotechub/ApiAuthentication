// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using Thribe.Data;

namespace Thribe.Migrations
{
    [DbContext(typeof(ThribeDbContext))]
    [Migration("20180523110831_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Thribe.ApplicationUser.AddressModel.UserAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AddressId");

                    b.Property<string>("AddressLine1");

                    b.Property<string>("AddressLine2");

                    b.Property<string>("AddressLine3");

                    b.Property<string>("AddressType");

                    b.Property<long>("AddressTypeId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Email");

                    b.Property<decimal?>("Latitude");

                    b.Property<decimal?>("Longitude");

                    b.Property<string>("PostCode");

                    b.Property<int?>("UserIdId");

                    b.HasKey("Id");

                    b.HasIndex("UserIdId");

                    b.ToTable("UserAddresses");
                });

            modelBuilder.Entity("Thribe.ApplicationUser.UserModel.SelectedSkill", b =>
                {
                    b.Property<long>("SelectedSkillId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<DateTime>("EntryDate");

                    b.Property<string>("MySkill1");

                    b.Property<string>("MySkill10");

                    b.Property<string>("MySkill2");

                    b.Property<string>("MySkill3");

                    b.Property<string>("MySkill4");

                    b.Property<string>("MySkill5");

                    b.Property<string>("MySkill6");

                    b.Property<string>("MySkill7");

                    b.Property<string>("MySkill8");

                    b.Property<string>("MySkill9");

                    b.Property<string>("OtherSkill");

                    b.Property<long>("SkillId");

                    b.HasKey("SelectedSkillId");

                    b.ToTable("SelectedSkills");
                });

            modelBuilder.Entity("Thribe.ApplicationUser.UserModel.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("Gender");

                    b.Property<string>("LastName");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("UserType");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Thribe.AppMessage.Infrastructure.AppMessages", b =>
                {
                    b.Property<long>("MessageId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Receiver");

                    b.Property<string>("Sender");

                    b.Property<string>("Status");

                    b.Property<string>("Subject");

                    b.HasKey("MessageId");

                    b.ToTable("AppMessages");
                });

            modelBuilder.Entity("Thribe.AppSupport.Infrastructure.Support", b =>
                {
                    b.Property<long>("SupportId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Email");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("Status");

                    b.Property<string>("Subject");

                    b.HasKey("SupportId");

                    b.ToTable("Supports");
                });

            modelBuilder.Entity("Thribe.Category.Models.Answer", b =>
                {
                    b.Property<long>("AnswerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Option_A");

                    b.Property<string>("Option_B");

                    b.Property<string>("Option_C");

                    b.Property<string>("Option_D");

                    b.Property<string>("Option_E");

                    b.Property<long>("QuestionId");

                    b.HasKey("AnswerId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("Thribe.Category.Models.GetQuestion", b =>
                {
                    b.Property<long>("QuestionId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("AssociatedPrice");

                    b.Property<string>("Options");

                    b.Property<string>("Question");

                    b.Property<string>("QuestionIconUrl");

                    b.Property<long>("QuestionNaireId");

                    b.Property<string>("QuestionOptionCode");

                    b.Property<string>("QuestionOptionIconUrl");

                    b.Property<long>("QuestionOptionId");

                    b.Property<string>("QuestionOptionName");

                    b.Property<long>("QuestionOptionSortOrder");

                    b.Property<long>("QuestionOptionTypeId");

                    b.Property<string>("QuestionOptionTypeName");

                    b.Property<string>("QuestionOptionUrl");

                    b.Property<long>("QuestionTypeId");

                    b.Property<string>("QuestionTypeName");

                    b.Property<long>("ServiceItemId");

                    b.Property<long>("ServiceQuestionId");

                    b.HasKey("QuestionId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Thribe.Category.Models.ServiceCategory", b =>
                {
                    b.Property<long>("CategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Charge");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("Items");

                    b.Property<bool>("MutipleItems");

                    b.Property<string>("Name");

                    b.Property<string>("Service");

                    b.Property<long>("ServiceId");

                    b.Property<string>("ServiceType");

                    b.HasKey("CategoryId");

                    b.ToTable("ServiceCategories");
                });

            modelBuilder.Entity("Thribe.Category.Models.Skills", b =>
                {
                    b.Property<long>("SkillId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CategoryId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("MySkill");

                    b.Property<string>("ServiceId");

                    b.HasKey("SkillId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("Thribe.Category.Models.UserSelection", b =>
                {
                    b.Property<long>("UserSelectionId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<string>("Email");

                    b.Property<long>("QuestionId");

                    b.Property<string>("ServiceQuestion");

                    b.Property<string>("UserAnswer");

                    b.HasKey("UserSelectionId");

                    b.ToTable("UserSelections");
                });

            modelBuilder.Entity("Thribe.MyOrder.Job", b =>
                {
                    b.Property<long>("JobId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Details");

                    b.Property<string>("Email");

                    b.Property<DateTime>("RegistrationDate");

                    b.Property<string>("Status");

                    b.Property<string>("Title");

                    b.HasKey("JobId");

                    b.ToTable("MyJobs");
                });

            modelBuilder.Entity("Thribe.MyOrder.Location", b =>
                {
                    b.Property<long>("LocationId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("Email");

                    b.Property<long?>("JobId1");

                    b.Property<string>("VendorLocation");

                    b.HasKey("LocationId");

                    b.HasIndex("JobId1");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Thribe.MyOrder.Order", b =>
                {
                    b.Property<long>("OrderId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddressLine1");

                    b.Property<string>("AddressLine2");

                    b.Property<double>("Amount");

                    b.Property<string>("Email");

                    b.Property<long>("JobId");

                    b.Property<bool>("MultipleItems");

                    b.Property<string>("OrderStatus");

                    b.Property<DateTime>("OrderTime");

                    b.Property<long>("PaymentId");

                    b.Property<string>("PaymentStatus");

                    b.Property<long>("ServiceId");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Thribe.MyOrder.OrderProcessing", b =>
                {
                    b.Property<long>("ProcessingId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<string>("Detail");

                    b.Property<long>("OrderId");

                    b.Property<string>("Process");

                    b.HasKey("ProcessingId");

                    b.ToTable("Processings");
                });

            modelBuilder.Entity("Thribe.MyOrder.PromoCode", b =>
                {
                    b.Property<long>("Code")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("EntryDate");

                    b.Property<string>("ExpiryDate");

                    b.Property<decimal>("Percent");

                    b.Property<string>("PromoNumber");

                    b.Property<string>("StartDate");

                    b.Property<string>("Status");

                    b.HasKey("Code");

                    b.ToTable("PromoCodes");
                });

            modelBuilder.Entity("Thribe.ApplicationUser.AddressModel.UserAddress", b =>
                {
                    b.HasOne("Thribe.ApplicationUser.UserModel.User", "UserId")
                        .WithMany()
                        .HasForeignKey("UserIdId");
                });

            modelBuilder.Entity("Thribe.MyOrder.Location", b =>
                {
                    b.HasOne("Thribe.MyOrder.Job", "JobId")
                        .WithMany()
                        .HasForeignKey("JobId1");
                });
#pragma warning restore 612, 618
        }
    }
}
